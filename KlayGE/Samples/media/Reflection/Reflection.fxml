<?xml version="1.0" encoding="utf-8"?>

<effect>
	<include name="util.fxml"/>
	<include name="Lighting.fxml"/>
	<include name="GBuffer.fxml"/>
	<include name="PostProcess.fxml"/>
	<include name="SSR.fxml"/>
	<include name="Noise.fxml"/>

	<parameter type="float4x4" name="back_mvp"/>
	<parameter type="float4x4" name="back_model_view"/>
	<parameter type="float4x4" name="inv_view"/>
	<parameter type="float3" name="eye_in_back_camera"/>

	<parameter type="textureCUBE" name="skybox_tex"/>
	<parameter type="textureCUBE" name="skybox_C_tex"/>
	<parameter type="sampler" name="skybox_sampler">
		<state name="filtering" value="min_mag_linear_mip_point"/>
		<state name="address_u" value="clamp"/>
		<state name="address_v" value="clamp"/>
		<state name="address_w" value="clamp"/>
	</parameter>
	
	<parameter type="texture2D" name="reflection_tex"/>
	<parameter type="sampler" name="reflection_sampler">
		<state name="filtering" value="min_mag_linear_mip_point"/>
		<state name="address_u" value="clamp"/>
		<state name="address_v" value="clamp"/>
		<state name="address_w" value="clamp"/>
	</parameter>

	<shader>
		<![CDATA[
void ReflectReflectionVS(float4 pos : POSITION,
			float2 texcoord : TEXCOORD0,
			float4 tangent_quat : TANGENT,
			out SS_TEXCOORD_TYPE oTcFront : TEXCOORD0,
			out SS_TEXCOORD_TYPE oTcBack : TEXCOORD1,
			out float3 oPosESFront : TEXCOORD2,
			out float3 oPosESBack : TEXCOORD3,
			out float3 oNormalOS : TEXCOORD4,
			out float3 oPosOS : TEXCOORD5,
			out float2 oTexcoord : TEXCOORD6,
			out float4 oPos : SV_Position)
{
	pos = float4(pos.xyz * pos_extent + pos_center, 1);
	texcoord = texcoord * tc_extent + tc_center;
	
	oPos = mul(pos, mvp);
	float4 pos_back = mul(pos, back_mvp);
	
	oTexcoord = texcoord;
	
	oPosESFront = mul(pos, model_view).xyz;
	oPosESBack = mul(pos, back_model_view).xyz;
	
	tangent_quat = tangent_quat * 2 - 1;
	oNormalOS = transform_quat(float3(0, 0, 1), tangent_quat);
	oPosOS = pos.xyz * 200;

	oTcFront = EncodeSSTexcoord(oPos);	
	oTcBack = EncodeSSTexcoord(pos_back);
}

float4 ReflectReflectionPS(
			SS_TEXCOORD_TYPE ss_tc_front : TEXCOORD0,
			SS_TEXCOORD_TYPE ss_tc_back : TEXCOORD1,
			float3 pos_es_front : TEXCOORD2,
			float3 pos_es_back : TEXCOORD3,
			float3 normal_os : TEXCOORD4,
			float3 pos_os : TEXCOORD5,
			float2 texcoord : TEXCOORD6) : SV_Target
{
	float2 tc_front = DecodeSSTexcoord(ss_tc_front);
	float2 tc_back = DecodeSSTexcoord(ss_tc_back);

	float3 bump = simplex_noise_gradient(pos_os, 0.1f);
	float3 normal = normalize(normal_os + bump * 0.01f);
	float3 normal_es_front = mul(normal, (float3x3)model_view);
	float3 normal_es_back = mul(normal, (float3x3)back_model_view);

	normal_es_front = normalize(normal_es_front);
	normal_es_back = normalize(normal_es_back);

	float3 reflect_vec_front = reflect(pos_es_front, normal_es_front);
	float3 reflect_vec_back = reflect(pos_es_back, normal_es_back);

	float3 reflect_vec_ws = mul(reflect_vec_front, (float3x3)inv_view);
	float3 sky = decode_hdr_yc(skybox_tex.SampleLevel(skybox_sampler, reflect_vec_ws, 0).r,
			skybox_C_tex.SampleLevel(skybox_sampler, reflect_vec_ws, 0)).xyz;

	float4 ssr;
	if (reflect_vec_front.z > 0)
	{
		ssr = CalcSSR(tc_front, normal_es_front, pos_es_front, pos_es_front, 1, 0.1f);
	}
	else if (reflect_vec_back.z < 0)
	{
		ssr = CalcSSR(tc_back, normal_es_back, pos_es_back, pos_es_back - eye_in_back_camera, 0, 0.1f);
	}
	else
	{
		ssr = 0;
	}
	ssr.xyz = lerp(sky, ssr.xyz, ssr.w);

	return ssr;
}

void ReflectSpecialShadingVS(float4 pos : POSITION,
			float2 texcoord : TEXCOORD0,
			float4 tangent_quat : TANGENT,
			out SS_TEXCOORD_TYPE oTc : TEXCOORD0,
			out float3 oPosES : TEXCOORD1,
			out float3 oNormalOS : TEXCOORD2,
			out float3 oPosOS : TEXCOORD3,
			out float2 oTexcoord : TEXCOORD4,
			out float4 oPos : SV_Position)
{
	pos = float4(pos.xyz * pos_extent + pos_center, 1);
	texcoord = texcoord * tc_extent + tc_center;

	oPos = mul(pos, mvp);
	oPosES = mul(pos, model_view).xyz;

	oTexcoord = texcoord;
	
	tangent_quat = tangent_quat * 2 - 1;
	oNormalOS = transform_quat(float3(0, 0, 1), tangent_quat);
	oPosOS = pos.xyz * 200;

	oTc = EncodeSSTexcoord(oPos);
}

float4 ReflectSpecialShadingPS(
			SS_TEXCOORD_TYPE ss_tc : TEXCOORD0,
			float3 pos_es : TEXCOORD1,
			float3 normal_os : TEXCOORD2,
			float3 pos_os : TEXCOORD3,
			float2 texcoord : TEXCOORD4) : SV_Target
{
	float2 tc = DecodeSSTexcoord(ss_tc);

	float3 bump = simplex_noise_gradient(pos_os, 0.1f);
	float3 normal = normal_os + bump * 0.01f;
	float3 normal_es = normalize(mul(normal, (float3x3)model_view));

	float3 albedo = albedo_clr.rgb;
	if (albedo_map_enabled)
	{
		albedo *= albedo_tex.Sample(aniso_sampler, texcoord).rgb;
	}
	float metalness = metalness_clr.r;
	if (metalness_clr.y > 0.5f)
	{
		metalness *= metalness_tex.Sample(aniso_sampler, texcoord).r;
	}
	
	float3 specular = SpecularColor(albedo, metalness);
	
	float fresnel = FresnelTerm(-normalize(pos_es), normal_es, specular).x;
	return float4(reflection_tex.Sample(reflection_sampler, tc).xyz, fresnel);
}
		]]>
	</shader>

	<technique name="ReflectReflectionTech">
		<pass name="p0">
			<state name="cull_mode" value="back"/>

			<state name="vertex_shader" value="ReflectReflectionVS()"/>
			<state name="pixel_shader" value="ReflectReflectionPS()"/>
		</pass>
	</technique>

	<technique name="ReflectSpecialShadingTech" inherit="SpecialShadingTech">
		<pass name="p0">
			<state name="blend_enable" value="true"/>
			<state name="blend_op" value="add"/>
			<state name="src_blend" value="src_alpha"/>
			<state name="dest_blend" value="one"/>
			<state name="blend_op_alpha" value="add"/>
			<state name="src_blend_alpha" value="zero"/>
			<state name="dest_blend_alpha" value="one"/>

			<state name="vertex_shader" value="ReflectSpecialShadingVS()"/>
			<state name="pixel_shader" value="ReflectSpecialShadingPS()"/>
		</pass>
	</technique>
</effect>
