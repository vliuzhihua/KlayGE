set(EXTERNAL_PROJECT_DIR "${KLAYGE_ROOT_DIR}/External")

set(EXTERNAL_VS_FOLDER_PREFIX "External")

FUNCTION(DOWNLOAD_7Z)
	IF(KLAYGE_HOST_PLATFORM_WINDOWS)
		SET(SEVENZIP_EXE_FILE_ID "20fea1314dbed552d5fedee096e2050369172ee1")
		SET(SEVENZIP_DLL_FILE_ID "344faf61c3eb76f4a2fb6452e83ed16c9cce73e0")
		DOWNLOAD_DEPENDENCY("External/Downloads/${KLAYGE_HOST_PLATFORM_NAME}/7z.exe" ${SEVENZIP_EXE_FILE_ID})
		DOWNLOAD_DEPENDENCY("External/Downloads/${KLAYGE_HOST_PLATFORM_NAME}/7z.dll" ${SEVENZIP_DLL_FILE_ID})
	ELSE()
		IF(KLAYGE_HOST_PLATFORM_LINUX)
			SET(SEVENZIP_EXE_FILE_ID "5692603bb94cff211178544738d5446bcdc2f438")
			SET(SEVENZIP_DLL_FILE_ID "e54e3a090dbc9bcaeda02688ee5a7d124df9dbba")
		ELSE()
			SET(SEVENZIP_EXE_FILE_ID "4faf36abd7797d8fa16d72ff499689c6f68a589e")
			SET(SEVENZIP_DLL_FILE_ID "c11f9e7a0f3c7abf70bc86cbff724b7a5d464911")
		ENDIF()
		DOWNLOAD_DEPENDENCY("External/Downloads/${KLAYGE_HOST_PLATFORM_NAME}/7z" ${SEVENZIP_EXE_FILE_ID})
		DOWNLOAD_DEPENDENCY("External/Downloads/${KLAYGE_HOST_PLATFORM_NAME}/7z.so" ${SEVENZIP_DLL_FILE_ID})
		FILE(COPY "${KLAYGE_ROOT_DIR}/External/Downloads/${KLAYGE_HOST_PLATFORM_NAME}/7z" DESTINATION "${KLAYGE_ROOT_DIR}/External/Downloads")
		FILE(COPY "${KLAYGE_ROOT_DIR}/External/Downloads/7z" DESTINATION "${KLAYGE_ROOT_DIR}/External/Downloads/${KLAYGE_HOST_PLATFORM_NAME}/" FILE_PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE)
	ENDIF()
ENDFUNCTION()

FUNCTION(DOWNLOAD_PACKAGE PACKAGE_NAME RELATIVE_PATH FILE_ID landmark_file)
	DOWNLOAD_7Z()
	DOWNLOAD_DEPENDENCY(${RELATIVE_PATH} ${FILE_ID} FILE_CHANGED)

	set(cached_hash_file_name "${CMAKE_CURRENT_BINARY_DIR}/KLAYGE_${PACKAGE_NAME}_HASH")
	if(EXISTS "${cached_hash_file_name}")
		file(STRINGS "${cached_hash_file_name}" cached_file_id)
	else()
		set(cached_file_id "")
	endif()
	IF(FILE_CHANGED OR (NOT ("${cached_file_id}" STREQUAL "${FILE_ID}")) OR (NOT EXISTS "${landmark_file}"))
		SET(SEVENZIP_PATH "${KLAYGE_ROOT_DIR}/External/Downloads/${KLAYGE_HOST_PLATFORM_NAME}/7z")
		EXECUTE_PROCESS(COMMAND "${SEVENZIP_PATH}" "x" "-y" "${KLAYGE_ROOT_DIR}/${RELATIVE_PATH}" WORKING_DIRECTORY "${KLAYGE_ROOT_DIR}/External/${PACKAGE_NAME}")
		file(WRITE "${cached_hash_file_name}" ${FILE_ID})
	ENDIF()
ENDFUNCTION()

function(CloneExternalLib name url branch shallow_exclude)
	set(external_folder "${KLAYGE_ROOT_DIR}/External")
	set(external_lib_folder "${external_folder}/${name}")

	if(EXISTS ${external_lib_folder})
		message(STATUS "Removing ${external_lib_folder}...")
		file(REMOVE_RECURSE ${external_lib_folder})
	endif()

	message(STATUS "Cloning ${name}...")
	set(branch_param "")
	set(branch_name_param "")
	if(NOT ("x${branch}" STREQUAL "x"))
		set(branch_param "-b")
		set(branch_name_param "${branch}")
	endif()
	set(shallow_exclude_param "")
	if(NOT ("x${shallow_exclude}" STREQUAL "x"))
		set(shallow_exclude_param "--shallow-exclude=${shallow_exclude}")
	endif()
	execute_process(COMMAND "git" "clone" ${url} ${branch_param} ${branch_name_param} ${shallow_exclude_param} "${name}" "-n" WORKING_DIRECTORY "${external_folder}")
endfunction()

function(CheckoutExternalLib name rev)
	set(external_lib_folder "${KLAYGE_ROOT_DIR}/External/${name}")

	execute_process(COMMAND "git" "checkout" "-q" ${rev} WORKING_DIRECTORY ${external_lib_folder} RESULT_VARIABLE checkout_err)
	set(${ARGV2} ${checkout_err} PARENT_SCOPE)
endfunction()

function(UpdateExternalLib name url rev)
	set(external_folder "${KLAYGE_ROOT_DIR}/External")
	set(external_lib_folder "${external_folder}/${name}")

	if(EXISTS "${external_lib_folder}/.git")
		set(need_clone FALSE)

		message(STATUS "Updating ${name} to revision ${rev}...")
		execute_process(COMMAND "git" "fetch" "origin" WORKING_DIRECTORY ${external_lib_folder})
		execute_process(COMMAND "git" "rev-parse" "HEAD" WORKING_DIRECTORY ${external_lib_folder} OUTPUT_VARIABLE head_rev)
		string(STRIP ${head_rev} head_rev)
		if (${head_rev} STREQUAL ${rev})
			set(need_checkout FALSE)
		else()
			set(need_checkout TRUE)
		endif()
	else()
		set(need_clone TRUE)
	endif()

	if(need_clone)
		CloneExternalLib(${name} ${url} "${ARGV3}" "${ARGV4}")
		set(need_checkout TRUE)
	endif()

	if(need_checkout)
		message(STATUS "Checking out to revision ${rev}...")
		CheckoutExternalLib(${name} ${rev} checkout_err)
		if(checkout_err)
			message(STATUS "COULD NOT checkout revision ${rev}, reclone the repository.")
			CloneExternalLib(${name} ${url} "${ARGV3}" "${ARGV4}")

			message(STATUS "Checking out to revision ${rev}...")
			CheckoutExternalLib(${name} ${rev})
		endif()
	endif()
endfunction()

FOREACH(flag_var
		CMAKE_C_FLAGS CMAKE_CXX_FLAGS)
	IF(KLAYGE_COMPILER_MSVC)
		STRING(REPLACE "/W4" "/W0" ${flag_var} "${${flag_var}}")
		STRING(REPLACE "/WX" "/WX-" ${flag_var} "${${flag_var}}")
	ELSE()
		STRING(REPLACE "-Wall" "-w" ${flag_var} "${${flag_var}}")
		STRING(REPLACE "-Werror" "-Wno-error" ${flag_var} "${${flag_var}}")
	ENDIF()
ENDFOREACH()

add_subdirectory(boost)
add_subdirectory(zlib)
add_subdirectory(Python)
add_subdirectory(7z)
add_subdirectory(rapidjson)
add_subdirectory(rapidxml)
if(KLAYGE_PLATFORM_ANDROID)
	add_subdirectory(android_native_app_glue)
endif()
add_subdirectory(libogg)
add_subdirectory(libvorbis)
if(KLAYGE_IS_DEV_PLATFORM)
	add_subdirectory(freetype)
	add_subdirectory(assimp)
	add_subdirectory(nanosvg)
	add_subdirectory(googletest)
	add_subdirectory(FreeImage)
	add_subdirectory(cxxopts)

	if((NOT (KLAYGE_ARCH_NAME STREQUAL "arm")) AND (NOT (KLAYGE_ARCH_NAME STREQUAL "arm64")))
		add_subdirectory(UniversalDXSDK)
	endif()
endif()
if(KLAYGE_PLATFORM_WINDOWS_DESKTOP OR KLAYGE_PLATFORM_ANDROID)
	add_subdirectory(openal-soft)
endif()
if(KLAYGE_COMPILER_MSVC AND (CMAKE_GENERATOR MATCHES "^Visual Studio") AND KLAYGE_PLATFORM_WINDOWS_DESKTOP AND (KLAYGE_ARCH_NAME STREQUAL "x64"))
	add_subdirectory(wpftoolkit)
endif()
